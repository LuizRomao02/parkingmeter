openapi: 3.0.3
info:
  title: Parking Meter API
  version: 1.0.0
  description: API de gerenciamento de Parking Meters
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:8080/
    description: Server local

tags:
  - name: ParkingMeters
    description: Operações relacionadas aos Parking Meters

paths:
  /parking_meter:
    get:
      tags:
        - ParkingMeters
      summary: Lista todos os Parking Meters
      operationId: findAll
      parameters:
        - name: page
          in: query
          description: Número da página
          schema:
            type: integer
            format: int32
            default: 1
            example: 1
        - name: size
          in: query
          description: Tamanho da página
          schema:
            type: integer
            format: int32
            default: 15
            example: 15
      responses:
        "200":
          description: Uma lista de paginada de parking meters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaginatedParkingMeters"
    post:
      tags:
        - ParkingMeters
      summary: Cria um Parking Meter
      operationId: create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateParkingMeter"
      responses:
        201:
          description: Parking Meter criado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParkingMeter"
        400:
          description: Erro de validação
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErroValidation"

  /parking_meter/{id}:
    get:
      tags:
        - ParkingMeters
      summary: Recupera Parking Meter por id
      operationId: getParkingMeter
      parameters:
        - name: id
          in: path
          description: ID do parking meter para busca
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
      responses:
        200:
          description: Parking Meter encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParkingMeter"
        404:
          description: Parking Meter não encontrado
    patch:
      tags:
        - ParkingMeters
      summary: Atualiza Parking Meter por id
      operationId: updateParkingMeter
      parameters:
        - name: id
          in: path
          description: ID do parking meter para atualizar
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateParkingMeter"
      responses:
        200:
          description: Parking Meter atualizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParkingMeter"
        404:
          description: Parking Meter não encontrado
    delete:
      tags:
        - ParkingMeters
      summary: Deleta Parking Meter por id
      operationId: deleteParkingMeter
      parameters:
        - name: id
          in: path
          description: ID do parking meter para deletar
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
      responses:
        204:
          description: Parking Meter deletado
        404:
          description: Parking Meter não encontrado

  /parking_meter/total:
    get:
      tags:
        - ParkingMeters
      summary: Recupera o total de Parking Meters cadastrados
      operationId: getParkingMeterTotal
      responses:
        200:
          description: Total de Parking Meters
          content:
            application/json:
              schema:
                properties:
                  total:
                    type: integer
                    format: int32
                    description: total de Parking Meters cadastrados

components:
  schemas:
    PaginatedParkingMeters:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/ParkingMeter"
        number:
          type: integer
          format: int32
          example: 0
        size:
          type: integer
          format: int32
          example: 10
        totalPages:
          type: integer
          format: int32
          example: 1
        totalElements:
          type: integer
          format: int64
          example: 1
        numberOfElements:
          type: integer
          format: int32
          example: 1

    ParkingMeter:
      type: object
      properties:
        id:
          type: string
          description: Identificador do parking meter
          example: 507f1f77bcf86cd799439011
        horario_funcionamento:
          type: object
          description: Horario de funcionamento
          properties:
            inicio:
              type: string
              description: Horario inicial
              maxLength: 5
              pattern: '^\d{2}:\d{2}$'
              example: 09:00
            fim:
              type: string
              description: Horario final
              maxLength: 5
              pattern: '^\d{2}:\d{2}$'
              example: 18:00
        tarifa:
          type: object
          properties:
            primeira_hora:
              type: number
              format: double
              description: Valor para a primeira hora
              example: 5.0
            demais_hotas:
              type: number
              format: double
              description: Valor para as demias horas
              example: 3.5
        vagas_disponiveis:
          type: integer
          format: int32
          description: Total de vagas disponiveis
          example: 5
        endereco:
          type: object
          description: Endereco da localização do parking meter
          properties:
            logradouro:
              type: string
              example: Praça da Sé
            bairro:
              type: string
              example: Sé
            cidade:
              type: string
              example: São Paulo
            estado:
              type: string
              example: São Paulo
            cep:
              type: string
              example: 01001-000

    UpdateParkingMeter:
      type: object
      properties:
        horario_funcionamento:
          type: object
          description: Horario de funcionamento
          properties:
            inicio:
              type: string
              description: Horario inicial
              maxLength: 5
              pattern: '^\d{2}:\d{2}$'
              example: 09:00
            fim:
              type: string
              description: Horario final
              maxLength: 5
              pattern: '^\d{2}:\d{2}$'
              example: 18:00
        tarifa:
          type: object
          properties:
            primeira_hora:
              type: number
              format: doouble
              description: Valor para a primeira hora
              example: 5.0
            demais_hotas:
              type: number
              format: double
              description: Valor para as demias horas
              example: 3.5
        vagas_disponiveis:
          type: integer
          format: int32
          description: Total de vagas disponiveis
          example: 5

    CreateParkingMeter:
      type: object
      properties:
        horario_funcionamento:
          type: object
          description: Horario de funcionamento
          properties:
            inicio:
              type: string
              description: Horario inicial
              maxLength: 5
              pattern: '^\d{2}:\d{2}$'
              example: 09:00
            fim:
              type: string
              description: Horario final
              maxLength: 5
              pattern: '^\d{2}:\d{2}$'
              example: 18:00
        tarifa:
          type: object
          properties:
            primeira_hora:
              type: number
              format: double
              description: Valor para a primeira hora
              example: 5.0
            demais_hotas:
              type: number
              format: double
              description: Valor para as demias horas
              example: 3.5
        vagas_disponiveis:
          type: integer
          format: int32
          description: Total de vagas disponiveis
          example: 5
        cep:
          type: string
          description: CEP da localização do Parking Meter
          example: 01001-000

    ErroValidation:
      type: object
      properties:
        campo:
          type: string
          description: Campo relacionado com o erro
          example: cep
        mensagem:
          type: string
          description: Mensagem do erro
          example: cep invalido